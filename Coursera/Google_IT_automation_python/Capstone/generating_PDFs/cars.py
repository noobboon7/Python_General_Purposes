#!/usr/bin/env python3
import json
import os
import locale
import sys
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = 0
  max_sold = None
  car_year_count = dict()
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item["total_sales"] > max_sales:
      max_sales = item["total_sales"]
      max_sold = item
      
    # TODO: also handle most popular car_year
    car_year = str(item["car"]["car_year"])
    if car_year not in car_year_count:
      car_year_count[car_year] = {"inventory": 0, "total_year_sold": 0}
    else:
      car_year_count[car_year]["inventory"] += 1
      
    car_year_count[car_year]["total_year_sold"] += item["total_sales"]
      
  year_most_sold = max(car_year_count.keys(), key=lambda year: car_year_count[year]["total_year_sold"])


    
  summary = [
    "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]), "The {} had the most sales: {}".format(format_car(max_sold["car"]), max_sales), "The most popular year was {} with {} sales.".format(year_most_sold, car_year_count[year_most_sold]["total_year_sold"])
  ]

  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  cars_table_data = cars_dict_to_table(data)
  # print(summary)
  join_summary = "\n".join(summary)
  report_path = "/tmp/cars.pdf"
  # TODO: turn this into a PDF report
  reports.generate(report_path,"Car Sales Report", join_summary, cars_table_data)
  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = join_summary

  message = emails.generate(sender, receiver, subject, body, report_path)
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)