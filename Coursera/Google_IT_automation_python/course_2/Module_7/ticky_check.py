#!/usr/bin/env python3
import re
import sys 
import csv
import operator

"""_summary_
The ranking of errors generated by the system: A list of all the error messages logged and how many times each error was found, sorted by the most common error to the least common error. This report doesn't take into account the users involved.

The user usage statistics for the service: A list of all users that have used the system, including how many info messages and how many error messages they've generated. This report is sorted by username.
  """
  
error_message_count = {}
user_entries_count = {}
log_file = sys.argv[1] 
 
with open(log_file) as file:
  for line in file: 
    error = re.search(r"ticky: ERROR ([\w ].*) (\(\w.+\))",line)
    
    if error == None:
      continue
    
    message, user = error.group(1).strip(),  error.group(2).strip()
    user = user[1:len(user)-1]
    
    if message not in error_message_count:
      error_message_count[message] = 1
    else:
      error_message_count[message] += 1
      
    if user not in user_entries_count:
      user_entries_count.update({user :{"Username" : user, "ERROR": 1, "INFO": 0}}) # If there is no
    else:
      user_entries_count[user]["ERROR"]  += 1
      
      

with open(log_file) as file:
  for line in file:
    log_entry = re.search(r"ticky: INFO ([\w ]*) (\[#\d+\]) (\(\w.+\))",line)
    if log_entry is None:
      continue
    user = log_entry.group(3).strip()
    user = user[1:len(user)-1]
    if user_entries_count[user]["INFO"] == 0:
      user_entries_count.update({user : {"Username": user, "ERROR": user_entries_count[user]["ERROR"] ,"INFO" : 1}})
    else:
      user_entries_count[user]["INFO"]  += 1


sorted_errors = sorted(error_message_count.items(), key=operator.itemgetter(1), reverse=True)
sorted_users = sorted(user_entries_count.items()) # need to order  by username here.

print(sorted_errors, sorted_users)


error_headers = ['Error','Count']
with open("error_message.csv", "w") as errors:
  writer = csv.writer(errors)
  writer.writerow(error_headers)
  writer.writerows(sorted_errors)
  errors.close()
  
user_headers = ['Username','ERROR', 'INFO']
with open("user_statistics.csv", "w") as stats:
  writer = csv.DictWriter(stats, fieldnames=user_headers)
  writer.writeheader()
  for el in sorted_users:
    writer.writerow(el[1])
  stats.close()
  
  